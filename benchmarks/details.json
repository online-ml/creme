{
    "Binary classification": {
        "Dataset": {
            "Bananas": "Bananas dataset.\n\nAn artificial dataset where instances belongs to several clusters with a banana shape.\nThere are two attributes that correspond to the x and y axis, respectively.\n\n    Name  Bananas                                                   \n    Task  Binary classification                                     \n Samples  5,300                                                     \nFeatures  2                                                         \n  Sparse  False                                                     \n    Path  /Users/mastelini/Documents/river/river/datasets/banana.zip",
            "Phishing": "Phishing websites.\n\nThis dataset contains features from web pages that are classified as phishing or not.\n\n    Name  Phishing                                                       \n    Task  Binary classification                                          \n Samples  1,250                                                          \nFeatures  9                                                              \n  Sparse  False                                                          \n    Path  /Users/mastelini/Documents/river/river/datasets/phishing.csv.gz"
        },
        "Model": {
            "ADWIN Bagging": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "ALMA": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  ALMAClassifier (\n    p=2\n    alpha=0.9\n    B=1.111111\n    C=1.414214\n  )\n)",
            "AdaBoost": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "Adaptive Random Forest": "[]",
            "Bagging": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "Extremely Fast Decision Tree": "ExtremelyFastDecisionTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  min_samples_reevaluate=20\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)",
            "Hoeffding Adaptive Tree": "HoeffdingAdaptiveTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  bootstrap_sampling=True\n  drift_window_threshold=300\n  adwin_confidence=0.002\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n  seed=42\n)",
            "Hoeffding Tree": "HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)",
            "Leveraging Bagging": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "Logistic regression": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  LogisticRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.005\n      )\n    )\n    loss=Log (\n      weight_pos=1.\n      weight_neg=1.\n    )\n    l2=0.\n    l1=0.\n    intercept_init=0.\n    intercept_lr=Constant (\n      learning_rate=0.01\n    )\n    clip_gradient=1e+12\n    initializer=Zeros ()\n  )\n)",
            "Naive Bayes": "GaussianNB ()",
            "PyTorch logistic regression": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  PyTorchBinaryClassifier (\n    network_func=<class '__main__.PyTorchLogReg'>\n    loss=BCELoss()\n    optimizer_func=\"<lambda>\"\n  )\n)",
            "Stacking": "[Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  SoftmaxRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=CrossEntropy (\n      class_weight={}\n    )\n    l2=0\n  )\n), GaussianNB (), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  KNNClassifier (\n    n_neighbors=5\n    window_size=100\n    min_distance_keep=0.\n    weighted=True\n    cleanup_every=0\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n    softmax=False\n  )\n)]",
            "Stochastic Gradient Tree": "SGTClassifier (\n  delta=1e-07\n  grace_period=200\n  init_pred=0.\n  max_depth=inf\n  lambda_value=0.1\n  gamma=1.\n  nominal_attributes=[]\n  feature_quantizer=StaticQuantizer (\n    n_bins=64\n    warm_start=100\n    buckets=None\n  )\n)",
            "Streaming Random Patches": "SRPClassifier (\n  model=HoeffdingTreeClassifier (\n    grace_period=50\n    max_depth=inf\n    split_criterion=\"info_gain\"\n    split_confidence=0.01\n    tie_threshold=0.05\n    leaf_prediction=\"nba\"\n    nb_threshold=0\n    nominal_attributes=None\n    splitter=GaussianSplitter (\n      n_splits=10\n    )\n    binary_split=False\n    max_size=100.\n    memory_estimate_period=1000000\n    stop_mem_management=False\n    remove_poor_attrs=False\n    merit_preprune=True\n  )\n  n_models=10\n  subspace_size=0.6\n  training_method=\"patches\"\n  lam=6\n  drift_detector=ADWIN (\n    delta=1e-05\n  )\n  warning_detector=ADWIN (\n    delta=0.0001\n  )\n  disable_detector=\"off\"\n  disable_weighted_vote=False\n  seed=None\n  metric=Accuracy (\n    cm=ConfusionMatrix (\n      classes=[]\n    )\n  )\n)",
            "Voting": "VotingClassifier (\n  models=[Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  SoftmaxRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=CrossEntropy (\n      class_weight={}\n    )\n    l2=0\n  )\n), GaussianNB (), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  KNNClassifier (\n    n_neighbors=5\n    window_size=100\n    min_distance_keep=0.\n    weighted=True\n    cleanup_every=0\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n    softmax=False\n  )\n)]\n  use_probabilities=True\n)",
            "Vowpal Wabbit logistic regression": "VW2RiverClassifier ()",
            "[baseline] Last Class": "NoChangeClassifier ()",
            "k-Nearest Neighbors": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  KNNClassifier (\n    n_neighbors=5\n    window_size=100\n    min_distance_keep=0.\n    weighted=True\n    cleanup_every=0\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n    softmax=False\n  )\n)",
            "sklearn SGDClassifier": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  SKL2RiverClassifier (\n    estimator=SGDClassifier(eta0=0.005, learning_rate='constant', loss='log_loss',\n                penalty='none')\n    classes=[False, True]\n  )\n)"
        }
    },
    "Multiclass classification": {
        "Dataset": {
            "ImageSegments": "Image segments classification.\n\nThis dataset contains features that describe image segments into 7 classes: brickface, sky,\nfoliage, cement, window, path, and grass.\n\n    Name  ImageSegments                                                  \n    Task  Multi-class classification                                     \n Samples  2,310                                                          \nFeatures  18                                                             \n  Sparse  False                                                          \n    Path  /Users/mastelini/Documents/river/river/datasets/segment.csv.zip",
            "Insects": "Insects dataset.\n\nThis dataset has different variants, which are:\n\n- abrupt_balanced\n- abrupt_imbalanced\n- gradual_balanced\n- gradual_imbalanced\n- incremental-abrupt_balanced\n- incremental-abrupt_imbalanced\n- incremental-reoccurring_balanced\n- incremental-reoccurring_imbalanced\n- incremental_balanced\n- incremental_imbalanced\n- out-of-control\n\nThe number of samples and the difficulty change from one variant to another. The number of\nclasses is always the same (6), except for the last variant (24).\n\n      Name  Insects                                                                                 \n      Task  Multi-class classification                                                              \n   Samples  52,848                                                                                  \n  Features  33                                                                                      \n   Classes  6                                                                                       \n    Sparse  False                                                                                   \n      Path  /Users/mastelini/river_data/Insects/INSECTS-abrupt_balanced_norm.arff                   \n       URL  http://sites.labic.icmc.usp.br/vsouza/repository/creme/INSECTS-abrupt_balanced_norm.arff\n      Size  15.66 MB                                                                                \nDownloaded  True                                                                                    \n   Variant  abrupt_balanced                                                                         \n\nParameters\n----------\n    variant\n        Indicates which variant of the dataset to load.",
            "Keystroke": "CMU keystroke dataset.\n\nUsers are tasked to type in a password. The task is to determine which user is typing in the\npassword.\n\nThe only difference with the original dataset is that the \"sessionIndex\" and \"rep\" attributes\nhave been dropped.\n\n      Name  Keystroke                                                       \n      Task  Multi-class classification                                      \n   Samples  20,400                                                          \n  Features  31                                                              \n    Sparse  False                                                           \n      Path  /Users/mastelini/river_data/Keystroke/DSL-StrongPasswordData.csv\n       URL  http://www.cs.cmu.edu/~keystroke/DSL-StrongPasswordData.csv     \n      Size  4.45 MB                                                         \nDownloaded  True                                                            "
        },
        "Model": {
            "ADWIN Bagging": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "AdaBoost": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "Adaptive Random Forest": "[]",
            "Bagging": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "Extremely Fast Decision Tree": "ExtremelyFastDecisionTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  min_samples_reevaluate=20\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)",
            "Hoeffding Adaptive Tree": "HoeffdingAdaptiveTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  bootstrap_sampling=True\n  drift_window_threshold=300\n  adwin_confidence=0.002\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n  seed=42\n)",
            "Hoeffding Tree": "HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)",
            "Leveraging Bagging": "[HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n)]",
            "Naive Bayes": "GaussianNB ()",
            "Stacking": "[Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  SoftmaxRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=CrossEntropy (\n      class_weight={}\n    )\n    l2=0\n  )\n), GaussianNB (), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  KNNClassifier (\n    n_neighbors=5\n    window_size=100\n    min_distance_keep=0.\n    weighted=True\n    cleanup_every=0\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n    softmax=False\n  )\n)]",
            "Streaming Random Patches": "SRPClassifier (\n  model=HoeffdingTreeClassifier (\n    grace_period=50\n    max_depth=inf\n    split_criterion=\"info_gain\"\n    split_confidence=0.01\n    tie_threshold=0.05\n    leaf_prediction=\"nba\"\n    nb_threshold=0\n    nominal_attributes=None\n    splitter=GaussianSplitter (\n      n_splits=10\n    )\n    binary_split=False\n    max_size=100.\n    memory_estimate_period=1000000\n    stop_mem_management=False\n    remove_poor_attrs=False\n    merit_preprune=True\n  )\n  n_models=10\n  subspace_size=0.6\n  training_method=\"patches\"\n  lam=6\n  drift_detector=ADWIN (\n    delta=1e-05\n  )\n  warning_detector=ADWIN (\n    delta=0.0001\n  )\n  disable_detector=\"off\"\n  disable_weighted_vote=False\n  seed=None\n  metric=Accuracy (\n    cm=ConfusionMatrix (\n      classes=[]\n    )\n  )\n)",
            "Voting": "VotingClassifier (\n  models=[Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  SoftmaxRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=CrossEntropy (\n      class_weight={}\n    )\n    l2=0\n  )\n), GaussianNB (), HoeffdingTreeClassifier (\n  grace_period=200\n  max_depth=inf\n  split_criterion=\"info_gain\"\n  split_confidence=1e-07\n  tie_threshold=0.05\n  leaf_prediction=\"nba\"\n  nb_threshold=0\n  nominal_attributes=None\n  splitter=GaussianSplitter (\n    n_splits=10\n  )\n  binary_split=False\n  max_size=100.\n  memory_estimate_period=1000000\n  stop_mem_management=False\n  remove_poor_attrs=False\n  merit_preprune=True\n), Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  KNNClassifier (\n    n_neighbors=5\n    window_size=100\n    min_distance_keep=0.\n    weighted=True\n    cleanup_every=0\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n    softmax=False\n  )\n)]\n  use_probabilities=True\n)",
            "[baseline] Last Class": "NoChangeClassifier ()",
            "k-Nearest Neighbors": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  KNNClassifier (\n    n_neighbors=5\n    window_size=100\n    min_distance_keep=0.\n    weighted=True\n    cleanup_every=0\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n    softmax=False\n  )\n)"
        }
    },
    "Regression": {
        "Dataset": {
            "Friedman7k": "Sample from the stationary version of the Friedman dataset.\n\nThis sample contains 10k instances sampled from the Friedman generator.\n\n    Name  Friedman7k\n    Task  Regression\n Samples  7,000     \nFeatures  10        \n  Sparse  False     ",
            "FriedmanGSG10k": "Sample from the FriedmanGSG generator.\n\nThis sample contains 10k instances sampled from the Friedman generator and presents\nglobal and slow gradual concept drifts that affect the data and happen after\n3.5k and 7k instances. The transition window between different concepts has a length of\n1k instances.\n\n    Name  FriedmanGSG10k\n    Task  Regression    \n Samples  10,000        \nFeatures  10            \n  Sparse  False         ",
            "FriedmanLEA10k": "Sample from the FriedmanLEA generator.\n\nThis sample contains 10k instances sampled from the Friedman generator and presents\nlocal-expanding abrupt concept drifts that locally affect the data and happen after\n2k, 5k, and 8k instances.\n\n    Name  FriedmanLEA10k\n    Task  Regression    \n Samples  10,000        \nFeatures  10            \n  Sparse  False         ",
            "TrumpApproval": "Donald Trump approval ratings.\n\nThis dataset was obtained by reshaping the data used by FiveThirtyEight for analyzing Donald\nTrump's approval ratings. It contains 5 features, which are approval ratings collected by\n5 polling agencies. The target is the approval rating from FiveThirtyEight's model. The goal of\nthis task is to see if we can reproduce FiveThirtyEight's model.\n\n    Name  TrumpApproval                                                        \n    Task  Regression                                                           \n Samples  1,001                                                                \nFeatures  6                                                                    \n  Sparse  False                                                                \n    Path  /Users/mastelini/Documents/river/river/datasets/trump_approval.csv.gz"
        },
        "Model": {
            "Adaptive Model Rules": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  AMRules (\n    n_min=200\n    delta=1e-07\n    tau=0.05\n    pred_type=\"adaptive\"\n    pred_model=LinearRegression (\n      optimizer=SGD (\n        lr=Constant (\n          learning_rate=0.01\n        )\n      )\n      loss=Squared ()\n      l2=0.\n      l1=0.\n      intercept_init=0.\n      intercept_lr=Constant (\n        learning_rate=0.01\n      )\n      clip_gradient=1e+12\n      initializer=Zeros ()\n    )\n    splitter=EBSTSplitter ()\n    drift_detector=ADWIN (\n      delta=0.002\n    )\n    alpha=0.99\n    anomaly_threshold=-0.75\n    m_min=30\n    ordered_rule_set=True\n    min_samples_split=5\n  )\n)",
            "Adaptive Random Forest": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  []\n)",
            "Exponentially Weighted Average": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  [LinearRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=Squared ()\n    l2=0.\n    l1=0.\n    intercept_init=0.\n    intercept_lr=Constant (\n      learning_rate=0.01\n    )\n    clip_gradient=1e+12\n    initializer=Zeros ()\n  ), HoeffdingAdaptiveTreeRegressor (\n    grace_period=200\n    max_depth=inf\n    split_confidence=1e-07\n    tie_threshold=0.05\n    leaf_prediction=\"model\"\n    leaf_model=LinearRegression (\n      optimizer=SGD (\n        lr=Constant (\n          learning_rate=0.01\n        )\n      )\n      loss=Squared ()\n      l2=0.\n      l1=0.\n      intercept_init=0.\n      intercept_lr=Constant (\n        learning_rate=0.01\n      )\n      clip_gradient=1e+12\n      initializer=Zeros ()\n    )\n    model_selector_decay=0.95\n    nominal_attributes=None\n    splitter=EBSTSplitter ()\n    min_samples_split=5\n    bootstrap_sampling=True\n    drift_window_threshold=300\n    adwin_confidence=0.002\n    binary_split=False\n    max_size=500.\n    memory_estimate_period=1000000\n    stop_mem_management=False\n    remove_poor_attrs=False\n    merit_preprune=True\n    seed=None\n  ), KNNRegressor (\n    n_neighbors=5\n    window_size=100\n    aggregation_method=\"mean\"\n    min_distance_keep=0.\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n  ), AMRules (\n    n_min=200\n    delta=1e-07\n    tau=0.05\n    pred_type=\"adaptive\"\n    pred_model=LinearRegression (\n      optimizer=SGD (\n        lr=Constant (\n          learning_rate=0.01\n        )\n      )\n      loss=Squared ()\n      l2=0.\n      l1=0.\n      intercept_init=0.\n      intercept_lr=Constant (\n        learning_rate=0.01\n      )\n      clip_gradient=1e+12\n      initializer=Zeros ()\n    )\n    splitter=EBSTSplitter ()\n    drift_detector=PageHinkley (\n      min_instances=30\n      delta=0.005\n      threshold=50\n      alpha=0.9999\n    )\n    alpha=0.99\n    anomaly_threshold=-0.75\n    m_min=30\n    ordered_rule_set=True\n    min_samples_split=5\n  )]\n)",
            "Hoeffding Adaptive Tree": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  HoeffdingAdaptiveTreeRegressor (\n    grace_period=200\n    max_depth=inf\n    split_confidence=1e-07\n    tie_threshold=0.05\n    leaf_prediction=\"model\"\n    leaf_model=LinearRegression (\n      optimizer=SGD (\n        lr=Constant (\n          learning_rate=0.01\n        )\n      )\n      loss=Squared ()\n      l2=0.\n      l1=0.\n      intercept_init=0.\n      intercept_lr=Constant (\n        learning_rate=0.01\n      )\n      clip_gradient=1e+12\n      initializer=Zeros ()\n    )\n    model_selector_decay=0.95\n    nominal_attributes=None\n    splitter=EBSTSplitter ()\n    min_samples_split=5\n    bootstrap_sampling=True\n    drift_window_threshold=300\n    adwin_confidence=0.002\n    binary_split=False\n    max_size=500.\n    memory_estimate_period=1000000\n    stop_mem_management=False\n    remove_poor_attrs=False\n    merit_preprune=True\n    seed=42\n  )\n)",
            "Hoeffding Tree": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  HoeffdingAdaptiveTreeRegressor (\n    grace_period=200\n    max_depth=inf\n    split_confidence=1e-07\n    tie_threshold=0.05\n    leaf_prediction=\"model\"\n    leaf_model=LinearRegression (\n      optimizer=SGD (\n        lr=Constant (\n          learning_rate=0.01\n        )\n      )\n      loss=Squared ()\n      l2=0.\n      l1=0.\n      intercept_init=0.\n      intercept_lr=Constant (\n        learning_rate=0.01\n      )\n      clip_gradient=1e+12\n      initializer=Zeros ()\n    )\n    model_selector_decay=0.95\n    nominal_attributes=None\n    splitter=EBSTSplitter ()\n    min_samples_split=5\n    bootstrap_sampling=True\n    drift_window_threshold=300\n    adwin_confidence=0.002\n    binary_split=False\n    max_size=500.\n    memory_estimate_period=1000000\n    stop_mem_management=False\n    remove_poor_attrs=False\n    merit_preprune=True\n    seed=None\n  )\n)",
            "Linear Regression": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  LinearRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=Squared ()\n    l2=0.\n    l1=0.\n    intercept_init=0.\n    intercept_lr=Constant (\n      learning_rate=0.01\n    )\n    clip_gradient=1e+12\n    initializer=Zeros ()\n  )\n)",
            "Linear Regression with l1 regularization": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  LinearRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=Squared ()\n    l2=0.\n    l1=1.\n    intercept_init=0.\n    intercept_lr=Constant (\n      learning_rate=0.01\n    )\n    clip_gradient=1e+12\n    initializer=Zeros ()\n  )\n)",
            "Linear Regression with l2 regularization": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  LinearRegression (\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.01\n      )\n    )\n    loss=Squared ()\n    l2=1.\n    l1=0.\n    intercept_init=0.\n    intercept_lr=Constant (\n      learning_rate=0.01\n    )\n    clip_gradient=1e+12\n    initializer=Zeros ()\n  )\n)",
            "Multi-layer Perceptron": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  MLPRegressor (\n    hidden_dims=(5,)\n    activations=(<class 'river.neural_net.activations.ReLU'>, <class 'river.neural_net.activations.ReLU'>, <class 'river.neural_net.activations.Identity'>)\n    loss=Squared ()\n    optimizer=SGD (\n      lr=Constant (\n        learning_rate=0.001\n      )\n    )\n    seed=42\n  )\n)",
            "Passive-Aggressive Regressor, mode 1": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  PARegressor (\n    C=1.\n    mode=1\n    eps=0.1\n    learn_intercept=True\n  )\n)",
            "Passive-Aggressive Regressor, mode 2": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  PARegressor (\n    C=1.\n    mode=2\n    eps=0.1\n    learn_intercept=True\n  )\n)",
            "Stochastic Gradient Tree": "SGTRegressor (\n  delta=1e-07\n  grace_period=200\n  init_pred=0.\n  max_depth=inf\n  lambda_value=0.1\n  gamma=1.\n  nominal_attributes=[]\n  feature_quantizer=StaticQuantizer (\n    n_bins=64\n    warm_start=100\n    buckets=None\n  )\n)",
            "Streaming Random Patches": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  SRPRegressor (\n    model=HoeffdingTreeRegressor (\n      grace_period=50\n      max_depth=inf\n      split_confidence=0.01\n      tie_threshold=0.05\n      leaf_prediction=\"model\"\n      leaf_model=LinearRegression (\n        optimizer=SGD (\n          lr=Constant (\n            learning_rate=0.01\n          )\n        )\n        loss=Squared ()\n        l2=0.\n        l1=0.\n        intercept_init=0.\n        intercept_lr=Constant (\n          learning_rate=0.01\n        )\n        clip_gradient=1e+12\n        initializer=Zeros ()\n      )\n      model_selector_decay=0.95\n      nominal_attributes=None\n      splitter=EBSTSplitter ()\n      min_samples_split=5\n      binary_split=False\n      max_size=500.\n      memory_estimate_period=1000000\n      stop_mem_management=False\n      remove_poor_attrs=False\n      merit_preprune=True\n    )\n    n_models=10\n    subspace_size=0.6\n    training_method=\"patches\"\n    lam=6\n    drift_detector=ADWIN (\n      delta=1e-05\n    )\n    warning_detector=ADWIN (\n      delta=0.0001\n    )\n    disable_detector=\"off\"\n    disable_weighted_vote=True\n    drift_detection_criteria=\"error\"\n    aggregation_method=\"mean\"\n    seed=42\n    metric=MAE ()\n  )\n)",
            "[baseline] Mean predictor": "StatisticRegressor (\n  statistic=Mean ()\n)",
            "k-Nearest Neighbors": "Pipeline (\n  StandardScaler (\n    with_std=True\n  ),\n  KNNRegressor (\n    n_neighbors=5\n    window_size=100\n    aggregation_method=\"mean\"\n    min_distance_keep=0.\n    distance_func=functools.partial(<function minkowski_distance at 0x116424a60>, p=2)\n  )\n)"
        }
    }
}